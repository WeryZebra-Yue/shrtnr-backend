openapi: 3.0.1
info:
  title: copilot-backend
  description: My cool app
  version: 1.0.0
servers:
  - url: /api/v1
tags:
  - name: Auth Service
    description: Auth Service endpoints
  - name: User Service
    description: User Service endpoints
  - name: Specification
    description: The swagger API specification
paths:
  /auth/join-waitlist:
    post:
      tags:
        - Auth Service
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JoinWaitlistBody"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JoinWaitlistResponse"

  /auth/signup:
    post:
      tags:
        - Auth Service
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpBody"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JoinWaitlistResponse"

  /auth/login:
    post:
      tags:
        - Auth Service
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginBody"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignUpResponse"

  /auth/google-login:
    post:
      tags:
        - Auth Service
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GoogleLoginBody"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignUpResponse"

  /user/getuser:
    get:
      tags:
        - User Service
      security:
        - JWT: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserResponse"
  
  /url/add-url:
    post:
      tags:
        - Url Service
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUrlBody"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUrlResponse"
 
  # /url/get-all-url:
  #   get:
  #     tags:
  #       - Url Service
  #     security:
  #       - JWT: []
  #     responses:
  #       200:
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/GetAllUrlResponse"

  /url/get-url:
    get:
      tags:
        - Url Service
      security:
        - JWT: []
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUrlResponse"
  
  /url/delete-url:
    post:
      tags:
        - Url Service
      security:
        - JWT: []
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUrlResponse"
  
  /url/update-url:
    post:
      tags:
        - Url Service
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUrlBody"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUrlResponse"
  
  /url/redirect-url/{shorturl}:
    get:
      tags:
        - Url Service
      parameters:
        - name: shorturl
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUrlResponse"
  /spec:
    get:
      tags:
        - Specification
      responses:
        200:
          description: Return the API specification
          content: {}
          

components:
  schemas:
    JoinWaitlistBody:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "johndoe@test.com"

    JoinWaitlistResponse:
      type: object
      properties:
        message:
          type: string
          example: "Thank you for joining the waitlist!"

    SignUpBody:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          example: "johndoe@test.com"
        password:
          type: string
          example: "password"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"

    SignUpResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: "jwt token"

    LoginBody:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "johndoe@test.com"
        password:
          type: string
          example: "password"

    GoogleLoginBody:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          example: "4/0AY0e-g5Uq7q3"

    GetUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "johndoe@test.com"

    GetUserResponse:
      type: object
      properties:
        id:
          type: string
          example: "5e1f5c9c-7b1a-4c1c-8c9d-3d2a1d2e3f4g"
        email:
          type: string
          format: email
          example: "johndoe@test.com"
        createdAt:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00.000Z"
  
    AddUrlBody:
      type: object
      required:
        - url
      properties:
        name:
          type: string
          example: "Google"
        description:
          type: string
          example: "Search Engine"
        url:
          type: string
          example: "https://www.google.com"
        shorturl:
          type: string
          example: "https://copilot.com/abc123"
        
    AddUrlResponse:
      type: object
      properties:
        id:
          type: string
          example: "5e1f5c9c-7b1a-4c1c-8c9d-3d2a1d2e3f4g"
        name:
          type: string
          example: "Google"
        description:
          type: string
          example: "Search Engine"
        url:
          type: string
          example: "https://www.google.com"
        shorturl:
          type: string
          example: "https://copilot.com/abc123"
        createdAt:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00.000Z"

    GetAllUrlResponse:
      type: array
      items:
        $ref: "#/components/schemas/AddUrlResponse"

  securitySchemes:
    JWT:
      type: apiKey
      name: Authorization
      in: header
      description: >-
        Enter the token with the `Bearer: ` prefix, e.g. "Bearer jwt token".
